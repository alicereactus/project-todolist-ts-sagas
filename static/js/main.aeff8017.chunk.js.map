{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/tasks-sagas.ts","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/todolists-sagas.ts","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/auth-sagas.ts","features/Login/Login.tsx","app/app-sagas.ts","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","initialState","removeTodolistAC","id","type","addTodolistAC","todolist","setTodolistsAC","todolists","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","status","Checkbox","Delete","isInitialized","setAppErrorAC","setAppStatusAC","addTaskAC","setTasksAC","tasks","fetchTasksWorkerSaga","removeTaskWorkerSaga","addTaskWorkerSaga","updateTaskWorkerSaga","tasksWatcherSaga","action","call","response","items","resultCode","item","messages","length","message","select","state","find","t","warn","apiModel","deadline","description","priority","startDate","domainModel","updateTaskAA","takeEvery","Todolist","demo","dispatch","useDispatch","useEffect","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","fetchTodolistsWorkerSaga","removeTodolistWorkerSaga","addTodolistWorkerSaga","changeTodolistTitleWorkerSaga","todolistsWatcherSaga","TodolistsList","useSelector","isLoggedIn","auth","removeTaskAA","addTaskAA","changeStatus","newTitle","thunk","changeTodolistAA","addTodolist","addTodolistAA","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","setIsLoggedInAC","loginWorkerSaga","logoutWorkerSaga","authWatcherSaga","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","initializeAppWorkerSaga","appWatcherSaga","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootWatcher","rootReducer","combineReducers","todoListId","copyState","forEach","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","all","run","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.aeff8017.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, { AxiosResponse } from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9aa516cb-8f4b-45f8-be8d-59445844c51c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists(): Promise<AxiosResponse<TodolistType[]>> {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string): Promise<AxiosResponse<GetTasksResponse>> {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string): Promise<AxiosResponse<ResponseType>> {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.status } : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case 'APP/SET-IS-INITIALIED':\r\n            return { ...state, isInitialized: action.value }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({ type: 'APP/SET-IS-INITIALIED', value } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import { AxiosResponse } from \"axios\"\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\"\r\nimport { GetTasksResponse, ResponseType, TaskType, todolistsAPI, UpdateTaskModelType } from \"../../api/todolists-api\"\r\nimport { setAppErrorAC, setAppStatusAC } from \"../../app/app-reducer\"\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { addTaskAC, removeTaskAC, setTasksAC, UpdateDomainTaskModelType, updateTaskAC } from \"./tasks-reducer\"\r\n\r\nexport function* fetchTasksWorkerSaga(action: ReturnType<typeof fetchTasksAA>) {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<GetTasksResponse> = yield call(todolistsAPI.getTasks, action.todolistId)\r\n    const tasks = response.data.items\r\n    yield put(setTasksAC(tasks, action.todolistId))\r\n    yield put(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const fetchTasksAA = (todolistId: string) => ({\r\n    type: \"TASKS/FETCH-TASKS\",\r\n    todolistId\r\n})\r\n\r\nexport function* removeTaskWorkerSaga (action: ReturnType<typeof removeTaskAA>) {\r\n    const response: AxiosResponse<ResponseType> = yield call(todolistsAPI.deleteTask, action.todolistId, action.taskId)\r\n    yield put(removeTaskAC(action.taskId, action.todolistId))\r\n}\r\n\r\nexport const removeTaskAA = (taskId: string, todolistId: string) => ({\r\n    type: \"TASKS/REMOVE-TASK\",\r\n    taskId,\r\n    todolistId\r\n})\r\n\r\nexport function* addTaskWorkerSaga(action: ReturnType<typeof addTaskAA>) {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<ResponseType<{ item: TaskType}>> = yield call(todolistsAPI.createTask, action.todolistId, action.title)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            const task = response.data.data.item\r\n            yield put(addTaskAC(task))\r\n            yield put(setAppStatusAC('succeeded'))\r\n        } else {\r\n            if (response.data.messages.length) {\r\n                yield put(setAppErrorAC(response.data.messages[0]))\r\n            } else {\r\n                yield put(setAppErrorAC('Some error occurred'))\r\n            }\r\n            yield put(setAppStatusAC('failed'))\r\n        }\r\n    } catch (error) {\r\n        yield put(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n        yield put(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n\r\nexport const addTaskAA = (title: string, todolistId: string) => ({\r\n    type: \"TASKS/ADD-TASK\",\r\n    title,\r\n    todolistId,\r\n})\r\n\r\nexport function* updateTaskWorkerSaga(action: ReturnType<typeof updateTaskAA>) {\r\n    const state: AppRootStateType = yield select()\r\n    const task = state.tasks[action.todolistId].find(t => t.id === action.taskId)\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        console.warn('task not found in the state')\r\n        return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...action.domainModel\r\n    }\r\n\r\n    const response: AxiosResponse<ResponseType<TaskType>> = yield call(todolistsAPI.updateTask, action.todolistId, action.taskId, apiModel)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            yield put(updateTaskAC(action.taskId, action.domainModel, action.todolistId))\r\n        }\r\n        else {\r\n            if (response.data.messages.length) {\r\n                yield put(setAppErrorAC(response.data.messages[0]))\r\n            } else {\r\n                yield put(setAppErrorAC('Some error occurred'))\r\n            }\r\n            yield put(setAppStatusAC('failed'))\r\n        }\r\n    } catch (error) {\r\n        yield put(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n        yield put(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const updateTaskAA = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: \"TASKS/UPDATE-TASK\",\r\n    taskId,\r\n    domainModel,\r\n    todolistId\r\n})\r\n\r\nexport function* tasksWatcherSaga() {\r\n    yield takeEvery(\"TASKS/FETCH-TASKS\", fetchTasksWorkerSaga)\r\n    yield takeEvery(\"TASKS/REMOVE-TASK\", removeTaskWorkerSaga)\r\n    yield takeEvery(\"TASKS/ADD-TASK\", addTaskWorkerSaga)\r\n    yield takeEvery(\"TASKS/UPDATE-TASK\", updateTaskWorkerSaga)\r\n}\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksAA } from '../tasks-sagas'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ demo = false, ...props }: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const action = fetchTasksAA(props.todolist.id)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task \r\n                    key={t.id} \r\n                    task={t} \r\n                    todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { AxiosResponse } from \"axios\";\r\nimport { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { ResponseType } from './../../api/todolists-api';\r\nimport { todolistsAPI, TodolistType } from \"../../api/todolists-api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"../../app/app-reducer\";\r\nimport { addTodolistAC, changeTodolistEntityStatusAC, changeTodolistTitleAC, removeTodolistAC, setTodolistsAC } from \"./todolists-reducer\";\r\n\r\nexport function* fetchTodolistsWorkerSaga() {\r\n    yield put(setAppStatusAC('loading'))\r\n    try {\r\n        const response: AxiosResponse<TodolistType[]> = yield call(todolistsAPI.getTodolists)\r\n        const todolists = response.data\r\n        yield put(setTodolistsAC(todolists))\r\n        yield put(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        yield put(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n        yield put(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const fetchTodolistsAA = () => ({\r\n    type: \"TODOLISTS/FETCH-TODOLISTS\",\r\n})\r\n\r\nexport function* removeTodolistWorkerSaga (action: ReturnType<typeof removeTodolistAA>) {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        yield put(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        yield put(changeTodolistEntityStatusAC(action.todolistId, 'loading'))\r\n        const response: AxiosResponse<ResponseType> = yield call(todolistsAPI.deleteTodolist, action.todolistId)\r\n        yield put(removeTodolistAC(action.todolistId))\r\n        //скажем глобально приложению, что асинхронная операция завершена\r\n        yield put(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const removeTodolistAA = (todolistId: string) => ({\r\n    type: \"TODOLISTS/REMOVE-TODOLIST\",\r\n    todolistId\r\n})\r\n\r\nexport function* addTodolistWorkerSaga (action: ReturnType<typeof addTodolistAA>) {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<ResponseType<{ item: TodolistType }>> = yield call(todolistsAPI.createTodolist, action.title)\r\n    const todolist = response.data.data.item\r\n    yield put(addTodolistAC(todolist))\r\n    yield put(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const addTodolistAA = (title: string) => ({\r\n    type: \"TODOLISTS/ADD-TODOLIST\",\r\n    title\r\n})\r\n\r\nexport function* changeTodolistTitleWorkerSaga (action: ReturnType<typeof changeTodolistAA>) {\r\n    const response: AxiosResponse<ResponseType> = yield call(todolistsAPI.updateTodolist, action.todolistId, action.title)\r\n    yield put(changeTodolistTitleAC(action.todolistId, action.title))\r\n}\r\n\r\nexport const changeTodolistAA = (todolistId: string, title: string) => ({\r\n    type: \"TODOLISTS/CHANGE-TODOLIST\",\r\n    todolistId,\r\n    title\r\n})\r\n\r\nexport function* todolistsWatcherSaga() {\r\n    yield takeEvery(\"TODOLISTS/FETCH-TODOLISTS\", fetchTodolistsWorkerSaga)\r\n    yield takeEvery(\"TODOLISTS/REMOVE-TODOLIST\", removeTodolistWorkerSaga)\r\n    yield takeEvery(\"TODOLISTS/ADD-TODOLIST\", addTodolistWorkerSaga)\r\n    yield takeEvery(\"TODOLISTS/CHANGE-TODOLIST\", changeTodolistTitleWorkerSaga)\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    changeTodolistFilterAC,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { addTaskAA, removeTaskAA, updateTaskAA } from './tasks-sagas'\r\nimport { addTodolistAA, changeTodolistAA, fetchTodolistsAA, removeTodolistAA } from './todolists-sagas'\r\n\r\nimport {Grid, Paper} from '@material-ui/core'\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsAA())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAA(id, todolistId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAA(title, todolistId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = updateTaskAA(id, {status}, todolistId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskAA(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistAA(id))\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistAA(id, title))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAA(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import { AxiosResponse } from 'axios';\r\nimport { call, put, takeEvery } from \"redux-saga/effects\"\r\nimport { authAPI, LoginParamsType, ResponseType } from \"../../api/todolists-api\"\r\nimport { setAppErrorAC, setAppStatusAC } from \"../../app/app-reducer\"\r\nimport { setIsLoggedInAC } from \"./auth-reducer\"\r\n\r\nexport function* loginWorkerSaga(action: ReturnType<typeof authLoginAA>) {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<ResponseType<{userId?: number}>> = yield call(authAPI.login, action.data)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            yield put(setIsLoggedInAC(true))\r\n            yield put(setAppStatusAC('succeeded'))\r\n        } else {\r\n            if (response.data.messages.length) {\r\n                yield put(setAppErrorAC(response.data.messages[0]))\r\n            } else {\r\n                yield put(setAppErrorAC('Some error occurred'))\r\n            }\r\n            yield put(setAppStatusAC('failed'))\r\n        }\r\n    } catch (error) {\r\n        yield put(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n        yield put(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const authLoginAA = (data: LoginParamsType) => ({\r\n    type: \"AUTH/LOGIN\",\r\n    data,\r\n})\r\n\r\nexport function* logoutWorkerSaga() {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<ResponseType<{userId?: number}>> = yield call(authAPI.logout)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            yield put(setIsLoggedInAC(false))\r\n            yield put(setAppStatusAC('succeeded'))\r\n        } else {\r\n            if (response.data.messages.length) {\r\n                yield put(setAppErrorAC(response.data.messages[0]))\r\n            } else {\r\n                yield put(setAppErrorAC('Some error occurred'))\r\n            }\r\n            yield put(setAppStatusAC('failed'))\r\n        }\r\n    } catch (error) {\r\n        yield put(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n        yield put(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const authLogoutAA = () => ({\r\n    type: \"AUTH/LOGOUT\",\r\n})\r\n\r\nexport function* authWatcherSaga() {\r\n    yield takeEvery(\"AUTH/LOGIN\", loginWorkerSaga)\r\n    yield takeEvery(\"AUTH/LOGOUT\", logoutWorkerSaga)\r\n}","import React from 'react'\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { authLoginAA } from './auth-sagas'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(authLoginAA(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import { AxiosResponse } from 'axios';\r\nimport { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { authAPI, ResponseType } from \"../api/todolists-api\";\r\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\";\r\nimport { setAppInitializedAC } from \"./app-reducer\";\r\n\r\n\r\nexport function* initializeAppWorkerSaga() {\r\n    const response: AxiosResponse<ResponseType<{id: number; email: string; login: string}>> = yield call(authAPI.me)\r\n    if (response.data.resultCode === 0) {\r\n        yield put(setIsLoggedInAC(true));\r\n    } else {\r\n    }\r\n    yield put(setAppInitializedAC(true));\r\n}\r\n\r\nexport const initializeAppAA = () => ({\r\n    type: \"APP/INITIALIZE-APP\"\r\n})\r\n\r\nexport function* appWatcherSaga() {\r\n    yield takeEvery(\"APP/INITIALIZE-APP\", initializeAppWorkerSaga)\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, HashRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport { initializeAppAA } from './app-sagas'\r\nimport { authLogoutAA } from '../features/Login/auth-sagas'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppAA())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(authLogoutAA())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/project-todolist-ts-sagas'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { all } from 'redux-saga/effects'\r\nimport { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { appReducer } from './app-reducer'\r\nimport { authReducer } from '../features/Login/auth-reducer'\r\nimport { tasksWatcherSaga } from '../features/TodolistsList/tasks-sagas';\r\nimport { appWatcherSaga } from './app-sagas';\r\nimport { authWatcherSaga } from '../features/Login/auth-sagas';\r\nimport { todolistsWatcherSaga } from '../features/TodolistsList/todolists-sagas';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, sagaMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// создаем root saga-watcher\r\nsagaMiddleware.run(rootWatcher)\r\nfunction* rootWatcher() {\r\n    yield all([\r\n        appWatcherSaga(), \r\n        authWatcherSaga(),\r\n        tasksWatcherSaga(),\r\n        todolistsWatcherSaga()\r\n    ])\r\n}\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}