{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","app/app-reducer.ts","utils/error-utils-sagas.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/tasks-sagas.ts","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/todolists-sagas.ts","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/auth-sagas.ts","features/Login/Login.tsx","app/app-sagas.ts","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","initialState","removeTodolistAC","id","type","addTodolistAC","todolist","setTodolistsAC","todolists","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","delete","put","todolistId","then","res","data","taskId","taskTitile","model","authAPI","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","status","Checkbox","Delete","isInitialized","setAppErrorAC","setAppStatusAC","handleServerAppErrorSaga","handleServerNetworkErrorSaga","messages","length","message","addTaskAC","setTasksAC","tasks","fetchTasksWorkerSaga","removeTaskWorkerSaga","addTaskWorkerSaga","updateTaskWorkerSaga","tasksWatcherSaga","action","call","items","response","resultCode","item","select","state","find","t","warn","apiModel","deadline","description","priority","startDate","domainModel","updateTaskAA","takeEvery","Todolist","demo","dispatch","useDispatch","useEffect","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","fetchTodolistsWorkerSaga","removeTodolistWorkerSaga","addTodolistWorkerSaga","changeTodolistTitleWorkerSaga","todolistsWatcherSaga","TodolistsList","useSelector","isLoggedIn","auth","removeTaskAA","addTaskAA","changeStatus","newTitle","thunk","changeTodolistAA","addTodolist","addTodolistAA","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","setIsLoggedInAC","loginWorkerSaga","logoutWorkerSaga","authWatcherSaga","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","initializeAppWorkerSaga","appWatcherSaga","App","logoutHandler","basename","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootWatcher","rootReducer","combineReducers","todoListId","copyState","forEach","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","all","run","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"6OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCmEMC,EAOAC,E,iHCxFNC,EAA0C,GAuBnCC,EAAmB,SAACC,GAAD,MAAiB,CAAEC,KAAM,kBAAmBD,OAC/DE,EAAgB,SAACC,GAAD,MAA6B,CAAEF,KAAM,eAAgBE,aAcrEC,EAAiB,SAACC,GAAD,MAAqC,CAAEJ,KAAM,gBAAiBI,c,0BCjC/EC,EAAcC,IAAMC,MAAK,YAAgE,IAApDC,EAAmD,EAAnDA,QAAmD,IAA1CC,gBAA0C,SACjGC,QAAQC,IAAI,sBADqF,MAGzEC,mBAAS,IAHgE,mBAG5FC,EAH4F,KAGrFC,EAHqF,OAIzEF,mBAAwB,MAJiD,mBAI5FG,EAJ4F,KAIrFC,EAJqF,KAM3FC,EAAiB,WACE,KAAjBJ,EAAMK,QACNV,EAAQK,GACRC,EAAS,KAETE,EAAS,sBAiBjB,OAAO,6BACH,kBAACG,EAAA,EAAD,CAAWC,QAAQ,WACfX,SAAUA,EACVM,QAASA,EACTM,MAAOR,EACPS,SAlBgB,SAACC,GACrBT,EAASS,EAAEC,cAAcH,QAkBrBI,WAfkB,SAACF,GACT,OAAVR,GACAC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAWAU,MAAM,QACNC,WAAYb,IAEhB,kBAACc,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAAgBR,SAAUA,GAC3D,kBAACuB,EAAA,EAAD,W,QCxCCC,EAAe3B,IAAMC,MAAK,SAAU2B,GAC7CxB,QAAQC,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,mBAEtEuB,EAFsE,KAE5DC,EAF4D,OAGnDxB,mBAASsB,EAAMb,OAHoC,mBAGtER,EAHsE,KAG/DC,EAH+D,KAiB3E,OAAOqB,EACD,kBAAChB,EAAA,EAAD,CAAWE,MAAOR,EAAOS,SALX,SAACC,GACjBT,EAASS,EAAEC,cAAcH,QAIyBgB,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZF,EAAMZ,SAAST,MAQb,0BAAM0B,cAda,WACrBH,GAAY,GACZtB,EAASoB,EAAMb,SAY2Ba,EAAMb,U,0BHnBlDmB,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDAPI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CASNC,EAAe,WAGpB,OADgBN,EAASO,IAAoB,eAFxCD,EAAe,SAKTjC,GAEX,OADgB2B,EAASQ,KAA2C,aAAc,CAAEnC,MAAOA,KANtFiC,EAAe,SAST/C,GAEX,OADgByC,EAASS,OAAT,qBAA4ClD,KAVvD+C,EAAe,SAaT/C,EAAYc,GAEvB,OADgB2B,EAASU,IAAT,qBAAyCnD,GAAM,CAAEc,MAAOA,KAdnEiC,EAAe,SAiBfK,GACL,OAAOX,EAASO,IAAT,qBAA6CI,EAA7C,WACFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAnBhBR,EAAe,SAqBbK,EAAoBI,GAC3B,OAAOf,EAASS,OAAT,qBAA4CE,EAA5C,kBAAgEI,KAtBlET,EAAe,SAwBbK,EAAoBK,GAC3B,OAAOhB,EAASQ,KAAT,qBAA8DG,EAA9D,UAAkF,CAAEtC,MAAO2C,KAzB7FV,EAAe,SA2BbK,EAAoBI,EAAgBE,GAC3C,OAAOjB,EAASU,IAAT,qBAAmDC,EAAnD,kBAAuEI,GAAUE,IAYnFC,EAAU,SACbJ,GAEF,OADgBd,EAASQ,KAAwC,aAAcM,IAF1EI,EAAU,WAOf,OADgBlB,EAASS,OAA0C,eAN9DS,EAAU,WAWf,OADgBlB,EAASO,IAAoB,WAC9BK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,U,SAoB3B3D,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KI/EL,IAAM+D,EAAOrD,IAAMC,MAAK,SAAC2B,GAC5B,IAAM0B,EAAiBC,uBAAY,kBAAM3B,EAAM4B,WAAW5B,EAAM6B,KAAKhE,GAAImC,EAAMiB,cAAa,CAACjB,EAAM6B,KAAKhE,GAAImC,EAAMiB,aAE5Ga,EAAkBH,uBAAY,SAACtC,GACjC,IAAI0C,EAAiB1C,EAAEC,cAAc0C,QACrChC,EAAMiC,iBAAiBjC,EAAM6B,KAAKhE,GAAIkE,EAAiBtE,EAAayE,UAAYzE,EAAa0E,IAAKnC,EAAMiB,cACzG,CAACjB,EAAM6B,KAAKhE,GAAImC,EAAMiB,aAEnBmB,EAAuBT,uBAAY,SAACU,GACtCrC,EAAMsC,gBAAgBtC,EAAM6B,KAAKhE,GAAIwE,EAAUrC,EAAMiB,cACtD,CAACjB,EAAM6B,KAAKhE,GAAImC,EAAMiB,aAEzB,OAAO,yBAAKsB,IAAKvC,EAAM6B,KAAKhE,GAAI2E,UAAWxC,EAAM6B,KAAKY,SAAWhF,EAAayE,UAAY,UAAY,IAClG,kBAACQ,EAAA,EAAD,CACIV,QAAShC,EAAM6B,KAAKY,SAAWhF,EAAayE,UAC5CtC,MAAM,UACNR,SAAU0C,IAGd,kBAAC/B,EAAD,CAAcZ,MAAOa,EAAM6B,KAAKlD,MAAOS,SAAUgD,IACjD,kBAACzC,EAAA,EAAD,CAAYE,QAAS6B,GACjB,kBAACiB,EAAA,EAAD,W,wBClCNhF,EAAiC,CACnC8E,OAAQ,OACR5D,MAAO,KACP+D,eAAe,GA0BNC,EAAgB,SAAChE,GAAD,MAA2B,CAAEf,KAAM,gBAAiBe,UACpEiE,EAAiB,SAACL,GAAD,MAAgC,CAAE3E,KAAM,iBAAkB2E,W,YC1BvEM,I,YASAC,IATV,SAAUD,GAA4B3B,GAAtC,qEACCA,EAAK6B,SAASC,OADf,gBAEC,OAFD,SAEOlC,YAAI6B,EAAczB,EAAK6B,SAAS,KAFvC,6BAIC,OAJD,SAIOjC,YAAI6B,EAAc,wBAJzB,OAMH,OANG,SAMG7B,YAAI8B,EAAe,WANtB,wCASA,SAAUE,GAA6BnE,GAAvC,iEACH,OADG,SACGmC,YAAI6B,EAAchE,EAAMsE,QAAUtE,EAAMsE,QAAU,wBADrD,OAEH,OAFG,SAEGnC,YAAI8B,EAAe,WAFtB,wC,aCVDnF,GAA+B,GAqCxByF,GAAY,SAACvB,GAAD,MACpB,CAAE/D,KAAM,WAAY+D,SAGZwB,GAAa,SAACC,EAAwBrC,GAAzB,MACrB,CAAEnD,KAAM,YAAawF,QAAOrC,e,YCrChBsC,I,YAaAC,I,YAWAC,I,YAuBAC,I,YAuCAC,IAtFV,SAAUJ,GAAqBK,GAA/B,yEACH,OADG,SACG5C,YAAI8B,EAAe,YADtB,OAE4B,OAF5B,SAEkCe,YAAKjD,EAAuBgD,EAAO3C,YAFrE,OAIH,OAFMG,EAFH,OAGGkC,EAAQlC,EAAK0C,MAHhB,SAIG9C,YAAIqC,GAAWC,EAAOM,EAAO3C,aAJhC,OAKH,OALG,UAKGD,YAAI8B,EAAe,cALtB,yCAaA,SAAUU,GAAqBI,GAA/B,iEAC2C,OAD3C,SACiDC,YAAKjD,EAAyBgD,EAAO3C,WAAY2C,EAAOvC,QADzG,OAEH,OAFG,gBAEGL,aDemBK,ECfFuC,EAAOvC,ODeWJ,ECfH2C,EAAO3C,WDgB5C,CAAEnD,KAAM,cAAeuD,SAAQJ,gBClB7B,iCDiBqB,IAACI,EAAgBJ,ICjBtC,IAWA,SAAUwC,GAAkBG,GAA5B,yEACH,OADG,SACG5C,YAAI8B,EAAe,YADtB,OAE+D,OAF/D,SAEqEe,YAAKjD,EAAyBgD,EAAO3C,WAAY2C,EAAOjF,OAF7H,UAEGoF,EAFH,gBAIkC,IAA7BA,EAAS3C,KAAK4C,WAJnB,iBAMK,OADMnC,EAAOkC,EAAS3C,KAAKA,KAAK6C,KALrC,UAMWjD,YAAIoC,GAAUvB,IANzB,QAOK,OAPL,UAOWb,YAAI8B,EAAe,cAP9B,gCASK,uBAAOC,GAAyBgB,EAAS3C,MAAzC,SATL,gCAYC,OAZD,0BAYC,gBAAO4B,GAA6B,EAAD,IAAnC,SAZD,uDAuBA,SAAUU,GAAqBE,GAA/B,6EAC6B,OAD7B,SACmCM,cADnC,UACGC,EADH,OAEGtC,EAAOsC,EAAMb,MAAMM,EAAO3C,YAAYmD,MAAK,SAAAC,GAAC,OAAIA,EAAExG,KAAO+F,EAAOvC,UAFnE,uBAKC7C,QAAQ8F,KAAK,+BALd,0BAmBqD,OAVlDC,EATH,aAUCC,SAAU3C,EAAK2C,SACfC,YAAa5C,EAAK4C,YAClBC,SAAU7C,EAAK6C,SACfC,UAAW9C,EAAK8C,UAChBhG,MAAOkD,EAAKlD,MACZ8D,OAAQZ,EAAKY,QACVmB,EAAOgB,aAhBX,UAmB2Df,YAAKjD,EAAyBgD,EAAO3C,WAAY2C,EAAOvC,OAAQkD,GAnB3H,WAmBGR,EAnBH,iBAqBkC,IAA7BA,EAAS3C,KAAK4C,WArBnB,iBAsBK,OAtBL,UAsBWhD,aDnCWK,ECmCMuC,EAAOvC,ODnCGE,ECmCKqC,EAAOgB,YDnCsB3D,ECmCT2C,EAAO3C,WDlCxE,CAAEnD,KAAM,cAAeyD,QAAON,aAAYI,YCYxC,gCAyBK,uBAAO0B,GAAyBgB,EAAS3C,MAAzC,SAzBL,gCA4BC,OA5BD,2BA4BC,gBAAO4B,GAA6B,EAAD,IAAnC,SA5BD,kCDbqB,IAAC3B,EAAgBE,EAAkCN,ICaxE,mBAgCA,IAAM4D,GAAe,SAACxD,EAAgBuD,EAAwC3D,GAAzD,MAAiF,CACzGnD,KAAM,oBACNuD,SACAuD,cACA3D,eAGG,SAAU0C,KAAV,iEACH,OADG,SACGmB,YAAU,oBAAqBvB,IADlC,OAEH,OAFG,SAEGuB,YAAU,oBAAqBtB,IAFlC,OAGH,OAHG,SAGGsB,YAAU,iBAAkBrB,IAH/B,OAIH,OAJG,SAIGqB,YAAU,oBAAqBpB,IAJlC,wCCtEA,IAAMqB,GAAW3G,IAAMC,MAAK,YAAkD,IAAD,IAArC2G,YAAqC,SAApBhF,EAAoB,wBAChFxB,QAAQC,IAAI,mBAEZ,IAAMwG,EAAWC,cACjBC,qBAAU,WACN,IAAIH,EAAJ,CAGA,IAAMpB,EDhBuC,CACjD9F,KAAM,oBACNmD,WCcgCjB,EAAMhC,SAASH,IAC3CoH,EAASrB,MACV,IAEH,IAAMwB,EAAUzD,uBAAY,SAAChD,GACzBqB,EAAMoF,QAAQzG,EAAOqB,EAAMhC,SAASH,MACrC,CAACmC,EAAMoF,QAASpF,EAAMhC,SAASH,KAK5BwH,EAAsB1D,uBAAY,SAAChD,GACrCqB,EAAMqF,oBAAoBrF,EAAMhC,SAASH,GAAIc,KAC9C,CAACqB,EAAMhC,SAASH,GAAImC,EAAMqF,sBAEvBC,EAAoB3D,uBAAY,kBAAM3B,EAAMuF,aAAa,MAAOvF,EAAMhC,SAASH,MAAK,CAACmC,EAAMhC,SAASH,GAAImC,EAAMuF,eAC9GC,EAAuB7D,uBAAY,kBAAM3B,EAAMuF,aAAa,SAAUvF,EAAMhC,SAASH,MAAK,CAACmC,EAAMhC,SAASH,GAAImC,EAAMuF,eACpHE,EAA0B9D,uBAAY,kBAAM3B,EAAMuF,aAAa,YAAavF,EAAMhC,SAASH,MAAK,CAACmC,EAAMhC,SAASH,GAAImC,EAAMuF,eAG5HG,EAAmB1F,EAAMsD,MAS7B,MAP8B,WAA1BtD,EAAMhC,SAAS2H,SACfD,EAAmB1F,EAAMsD,MAAMqC,QAAO,SAAAtB,GAAC,OAAIA,EAAE5B,SAAWhF,EAAa0E,QAE3C,cAA1BnC,EAAMhC,SAAS2H,SACfD,EAAmB1F,EAAMsD,MAAMqC,QAAO,SAAAtB,GAAC,OAAIA,EAAE5B,SAAWhF,EAAayE,cAGlE,6BACH,4BAAI,kBAACnC,EAAD,CAAcZ,MAAOa,EAAMhC,SAASW,MAAOS,SAAUiG,IACrD,kBAAC1F,EAAA,EAAD,CAAYE,QAvBG,WACnBG,EAAM4F,eAAe5F,EAAMhC,SAASH,KAsBKU,SAA0C,YAAhCyB,EAAMhC,SAAS6H,cAC1D,kBAAClD,EAAA,EAAD,QAGR,kBAACxE,EAAD,CAAaG,QAAS8G,EAAS7G,SAA0C,YAAhCyB,EAAMhC,SAAS6H,eACxD,6BAEQH,EAAiBI,KAAI,SAAAzB,GAAC,OAAI,kBAAC5C,EAAD,CACtBc,IAAK8B,EAAExG,GACPgE,KAAMwC,EACNpD,WAAYjB,EAAMhC,SAASH,GAC3B+D,WAAY5B,EAAM4B,WAClBU,gBAAiBtC,EAAMsC,gBACvBL,iBAAkBjC,EAAMiC,uBAIpC,yBAAK8D,MAAO,CAAEC,WAAY,SACtB,kBAACC,EAAA,EAAD,CAAQ/G,QAAmC,QAA1Bc,EAAMhC,SAAS2H,OAAmB,WAAa,OAC5D9F,QAASyF,EACT1F,MAAO,WAFX,OAKA,kBAACqG,EAAA,EAAD,CAAQ/G,QAAmC,WAA1Bc,EAAMhC,SAAS2H,OAAsB,WAAa,OAC/D9F,QAAS2F,EACT5F,MAAO,WAFX,UAIA,kBAACqG,EAAA,EAAD,CAAQ/G,QAAmC,cAA1Bc,EAAMhC,SAAS2H,OAAyB,WAAa,OAClE9F,QAAS4F,EACT7F,MAAO,aAFX,kB,YClFKsG,I,YAgBAC,I,YAgBAC,I,YAaAC,I,YAWAC,IAxDV,SAAUJ,KAAV,yEACH,OADG,SACGlF,YAAI8B,EAAe,YADtB,OAGiD,OAHjD,kBAGuDe,YAAKjD,GAH5D,OAKC,OAFMmD,EAHP,OAIO7F,EAAY6F,EAAS3C,KAJ5B,SAKOJ,YAAI/C,EAAeC,IAL1B,OAMC,OAND,UAMO8C,YAAI8B,EAAe,cAN1B,gCAQC,OARD,0BAQC,gBAAOE,GAA6B,EAAD,IAAnC,SARD,uDAgBA,SAAUmD,GAAyBvC,GAAnC,iEAEH,OAFG,SAEG5C,YAAI8B,EAAe,YAFtB,OAIH,OAJG,SAIG9B,YTW8E,CACpFlD,KAAM,gCAAiCD,GSZA+F,EAAO3C,WTYHwB,OSZe,YAJvD,OAK2C,OAL3C,SAKiDoB,YAAKjD,EAA6BgD,EAAO3C,YAL1F,OAMH,OANG,gBAMGD,YAAIpD,EAAiBgG,EAAO3C,aAN/B,OAQH,OARG,UAQGD,YAAI8B,EAAe,cARtB,yCAgBA,SAAUsD,GAAsBxC,GAAhC,yEACH,OADG,SACG5C,YAAI8B,EAAe,YADtB,OAEmE,OAFnE,SAEyEe,YAAKjD,EAA6BgD,EAAOjF,OAFlH,OAIH,OAFMoF,EAFH,OAGG/F,EAAW+F,EAAS3C,KAAKA,KAAK6C,KAHjC,SAIGjD,YAAIjD,EAAcC,IAJrB,OAKH,OALG,UAKGgD,YAAI8B,EAAe,cALtB,yCAaA,SAAUuD,GAA8BzC,GAAxC,iEAC2C,OAD3C,SACiDC,YAAKjD,EAA6BgD,EAAO3C,WAAY2C,EAAOjF,OAD7G,OAEH,OAFG,gBAEGqC,aT1B4BnD,ES0BF+F,EAAO3C,WT1BOtC,ES0BKiF,EAAOjF,MT1BO,CACjEb,KAAM,wBACND,KACAc,WSqBG,iCTxB8B,IAACd,EAAYc,ISwB3C,IAWA,SAAU2H,KAAV,iEACH,OADG,SACGxB,YAAU,4BAA6BoB,IAD1C,OAEH,OAFG,SAEGpB,YAAU,4BAA6BqB,IAF1C,OAGH,OAHG,SAGGrB,YAAU,yBAA0BsB,IAHvC,OAIH,OAJG,SAIGtB,YAAU,4BAA6BuB,IAJ1C,wC,wBCxCME,GAAqC,SAAC,GAAsB,IAAD,IAAnBvB,YAAmB,SAC9D9G,EAAYsI,aAAyD,SAAArC,GAAK,OAAIA,EAAMjG,aACpFoF,EAAQkD,aAA8C,SAAArC,GAAK,OAAIA,EAAMb,SACrEmD,EAAaD,aAAuC,SAAArC,GAAK,OAAIA,EAAMuC,KAAKD,cAExExB,EAAWC,cAEjBC,qBAAU,YACFH,GAASyB,GAGbxB,EDf+B,CACnCnH,KAAM,gCCeH,IAEH,IAAM8D,EAAaD,uBAAY,SAAU9D,EAAYoD,GACjD,IAAM2C,EHbc,SAACvC,EAAgBJ,GAAjB,MAAyC,CACjEnD,KAAM,oBACNuD,SACAJ,cGUmB0F,CAAa9I,EAAIoD,GAChCgE,EAASrB,KACV,IAEGwB,EAAUzD,uBAAY,SAAUhD,EAAesC,GACjD,IAAM2C,EHKW,SAACjF,EAAesC,GAAhB,MAAwC,CAC7DnD,KAAM,iBACNa,QACAsC,cGRmB2F,CAAUjI,EAAOsC,GAChCgE,EAASrB,KACV,IAEGiD,EAAelF,uBAAY,SAAU9D,EAAY4E,EAAsBxB,GACzE,IAAM2C,EAASiB,GAAahH,EAAI,CAAE4E,UAAUxB,GAC5CgE,EAASrB,KACV,IAEGtB,EAAkBX,uBAAY,SAAU9D,EAAYiJ,EAAkB7F,GACxE,IAAM8F,EAAQlC,GAAahH,EAAI,CAAEc,MAAOmI,GAAY7F,GACpDgE,EAAS8B,KACV,IAEGxB,EAAe5D,uBAAY,SAAUxC,EAAyB8B,GAChE,IAAM2C,EVzBmE,CAC7E9F,KAAM,yBACND,GUuB0CoD,EVtB1C0E,OUsBsDxG,GAClD8F,EAASrB,KACV,IAEGgC,EAAiBjE,uBAAY,SAAU9D,GACzCoH,ED7BiD,CACrDnH,KAAM,4BACNmD,WC2B8BpD,MAC3B,IAEGwH,EAAsB1D,uBAAY,SAAU9D,EAAYc,GAC1DsG,EDVwB,SAAChE,EAAoBtC,GAArB,MAAwC,CACpEb,KAAM,4BACNmD,aACAtC,SCOaqI,CAAiBnJ,EAAIc,MAC/B,IAEGsI,EAActF,uBAAY,SAAChD,GAC7BsG,EDxBqB,SAACtG,GAAD,MAAoB,CAC7Cb,KAAM,yBACNa,SCsBauI,CAAcvI,MACxB,CAACsG,IAEJ,OAAKwB,EAIE,oCACH,kBAACU,GAAA,EAAD,CAAMC,WAAS,EAACrB,MAAO,CAAEsB,QAAS,SAC9B,kBAAClJ,EAAD,CAAaG,QAAS2I,KAE1B,kBAACE,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAEjBpJ,EAAU4H,KAAI,SAAAyB,GACV,IAAIC,EAAmBlE,EAAMiE,EAAG1J,IAEhC,OAAO,kBAACsJ,GAAA,EAAD,CAAMlD,MAAI,EAAC1B,IAAKgF,EAAG1J,IACtB,kBAAC4J,GAAA,EAAD,CAAO1B,MAAO,CAAEsB,QAAS,SACrB,kBAACtC,GAAD,CACI/G,SAAUuJ,EACVjE,MAAOkE,EACP5F,WAAYA,EACZ2D,aAAcA,EACdH,QAASA,EACTnD,iBAAkB4E,EAClBjB,eAAgBA,EAChBtD,gBAAiBA,EACjB+C,oBAAqBA,EACrBL,KAAMA,WAxBvB,kBAAC,IAAD,CAAU0C,GAAI,Y,oBCrE7B,SAASC,GAAM3H,GACX,OAAO,kBAAC,KAAD,eAAU4H,UAAW,EAAG1I,QAAQ,UAAac,IAGjD,SAAS6H,KAEZ,IAAMhJ,EAAQ2H,aAA6C,SAAArC,GAAK,OAAIA,EAAM2D,IAAIjJ,SACxEoG,EAAWC,cAEX6C,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJhD,EAASpC,EAAc,QAIrBqF,EAAmB,OAAVrJ,EAEf,OACI,kBAACsJ,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,GACrD,kBAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,SACjC1J,I,8DC7BXlB,GAAiC,CACnC8I,YAAY,GAcH+B,GAAkB,SAACrJ,GAAD,MAC1B,CAAErB,KAAM,yBAA0BqB,U,YCTtBsJ,I,YAoBAC,I,YAmBAC,IAvCV,SAAUF,GAAgB7E,GAA1B,uEACH,OADG,SACG5C,YAAI8B,EAAe,YADtB,OAEgE,OAFhE,SAEsEe,YAAKrC,EAAeoC,EAAOxC,MAFjG,UAEG2C,EAFH,gBAIkC,IAA7BA,EAAS3C,KAAK4C,WAJnB,iBAKK,OALL,SAKWhD,YAAIwH,IAAgB,IAL/B,OAMK,OANL,UAMWxH,YAAI8B,EAAe,cAN9B,gCAQK,uBAAOC,GAAyBgB,EAAS3C,MAAzC,SARL,gCAWC,OAXD,0BAWC,gBAAO4B,GAA6B,EAAD,IAAnC,SAXD,uDAoBA,SAAU0F,KAAV,uEACH,OADG,SACG1H,YAAI8B,EAAe,YADtB,OAEgE,OAFhE,SAEsEe,YAAKrC,GAF3E,UAEGuC,EAFH,gBAIkC,IAA7BA,EAAS3C,KAAK4C,WAJnB,iBAKK,OALL,SAKWhD,YAAIwH,IAAgB,IAL/B,OAMK,OANL,UAMWxH,YAAI8B,EAAe,cAN9B,gCAQK,uBAAOC,GAAyBgB,EAAS3C,MAAzC,SARL,gCAWC,OAXD,0BAWC,gBAAO4B,GAA6B,EAAD,IAAnC,SAXD,uDAmBA,SAAU2F,KAAV,iEACH,OADG,SACG7D,YAAU,aAAc2D,IAD3B,OAEH,OAFG,SAEG3D,YAAU,cAAe4D,IAF5B,wCCtCA,IAAME,GAAQ,WACjB,IAAM3D,EAAWC,cAEXuB,EAAaD,aAAuC,SAAArC,GAAK,OAAIA,EAAMuC,KAAKD,cAExEoC,EAASC,aAAU,CACrBC,SAAU,SAACC,GACP,OAAKA,EAAOC,MAKPD,EAAOE,cAAZ,EACW,CACHA,SAAU,wBANP,CACHD,MAAO,sBAUnBE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,GAEhBC,SAAU,SAAAL,GACN/D,EDX2C,CACnDnH,KAAM,aACNsD,KCS6B4H,OAI7B,OAAIvC,EACO,kBAAC,IAAD,CAAUiB,GAAI,MAIlB,kBAACP,GAAA,EAAD,CAAMC,WAAS,EAACkC,QAAQ,UAC3B,kBAACnC,GAAA,EAAD,CAAMlD,MAAI,EAACsF,GAAI,GACX,0BAAMF,SAAUR,EAAOW,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,uDAC6B,uBAAGC,KAAM,wCAC9BC,OAAQ,UADa,SAG7B,sEAGA,yDAEA,8CAIJ,kBAACC,GAAA,EAAD,KACI,kBAAC5K,EAAA,EAAD,eACIQ,MAAM,QACNqK,OAAO,UACHjB,EAAOkB,cAAc,WAE5BlB,EAAOmB,OAAOf,MAAQ,6BAAMJ,EAAOmB,OAAOf,OAAe,KAC1D,kBAAChK,EAAA,EAAD,eACInB,KAAK,WACL2B,MAAM,WACNqK,OAAO,UACHjB,EAAOkB,cAAc,cAE5BlB,EAAOmB,OAAOd,SAAW,6BAAML,EAAOmB,OAAOd,UAAkB,KAChE,kBAACe,GAAA,EAAD,CACIxK,MAAO,cACPyK,QAAS,kBAACxH,EAAA,EAAD,iBACDmG,EAAOkB,cAAc,cADpB,CAEL/H,QAAS6G,EAAOG,OAAOI,gBAG/B,kBAACnD,EAAA,EAAD,CAAQnI,KAAM,SAAUoB,QAAS,YAAaU,MAAO,WAArD,e,YC1EPuK,I,YAiBAC,IAjBV,SAAUD,KAAV,iEAE8B,OAF9B,kBAEoCtG,YAAKrC,GAFzC,UAGyB,IAHzB,OAGUwC,WAHV,gBAIK,OAJL,SAIWhD,YAAIwH,IAAgB,IAJ/B,6BASC,OATD,mBASOxH,YXe0C,CAAElD,KAAM,wBAAyBqB,OWfnD,IAT/B,qFAiBA,SAAUiL,KAAV,iEACH,OADG,SACGtF,YAAU,qBAAsBqF,IADnC,wCCkDQE,OA/Cf,YAA2C,IAAD,IAA3BrF,YAA2B,SAChCvC,EAAS+D,aAAiD,SAACrC,GAAD,OAAWA,EAAM2D,IAAIrF,UAC/EgE,EAAaD,aAAuC,SAAArC,GAAK,OAAIA,EAAMuC,KAAKD,cACxE7D,EAAgB4D,aAAuC,SAACrC,GAAD,OAAWA,EAAM2D,IAAIlF,iBAC5EqC,EAAWC,cAEXoF,EAAgB3I,uBAAY,WAC9BsD,EHQ2B,CAC/BnH,KAAM,kBGRH,IAOH,OALAqH,qBAAU,WACNF,EDlB8B,CAClCnH,KAAM,yBCkBH,IAGE8E,EAQD,kBAAC,KAAD,CAAe2H,SAAU,6BACrB,yBAAK/H,UAAU,OACX,kBAACqF,GAAD,MACA,kBAAC2C,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAAC/K,EAAA,EAAD,CAAYgL,KAAK,QAAQ/K,MAAM,UAAUgL,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY5L,QAAQ,MAApB,QAGCuH,GAAc,kBAACR,EAAA,EAAD,CAAQrG,MAAM,UAAUC,QAASyK,GAAjC,YAEP,YAAX7H,GAAwB,kBAACsI,EAAA,EAAD,OAE7B,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,GAAD,CAAepG,KAAMA,OAC3D,kBAAC,IAAD,CAAOmG,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,GAAD,YAxB1C,yBACHrF,MAAO,CAAE0E,SAAU,QAASY,IAAK,MAAOC,UAAW,SAAUC,MAAO,SACpE,kBAACC,EAAA,EAAD,Q,uCCdFC,IAhBJC,GAAcC,aAAgB,CAChCrI,MXXwB,WAAgF,IAA/Ea,EAA8E,uDAAtDxG,GAAciG,EAAwC,uCACvG,OAAQA,EAAO9F,MACX,IAAK,cACD,OAAO,2BAAKqG,GAAZ,mBAAoBP,EAAO3C,WAAakD,EAAMP,EAAO3C,YAAY0E,QAAO,SAAAtB,GAAC,OAAIA,EAAExG,IAAM+F,EAAOvC,YAChG,IAAK,WACD,OAAO,2BAAK8C,GAAZ,mBAAoBP,EAAO/B,KAAK+J,WAAhC,CAA8ChI,EAAO/B,MAArD,mBAA8DsC,EAAMP,EAAO/B,KAAK+J,gBACpF,IAAK,cACD,OAAO,2BACAzH,GADP,mBAEKP,EAAO3C,WAAakD,EAAMP,EAAO3C,YAC7B6E,KAAI,SAAAzB,GAAC,OAAIA,EAAExG,KAAO+F,EAAOvC,OAAhB,2BAA8BgD,GAAMT,EAAOrC,OAAU8C,OAE3E,IAAK,eACD,OAAO,2BAAKF,GAAZ,mBAAoBP,EAAO5F,SAASH,GAAK,KAC7C,IAAK,kBACD,IAAMgO,EAAS,eAAQ1H,GAEvB,cADO0H,EAAUjI,EAAO/F,IACjBgO,EACX,IAAK,gBACD,IAAMA,EAAS,eAAQ1H,GAIvB,OAHAP,EAAO1F,UAAU4N,SAAQ,SAAAvE,GACrBsE,EAAUtE,EAAG1J,IAAM,MAEhBgO,EAEX,IAAK,YACD,OAAO,2BAAK1H,GAAZ,mBAAoBP,EAAO3C,WAAa2C,EAAON,QACnD,QACI,OAAOa,IWhBfjG,UjBX4B,WAAsG,IAArGiG,EAAoG,uDAAjExG,EAAciG,EAAmD,uCACjI,OAAQA,EAAO9F,MACX,IAAK,kBACD,OAAOqG,EAAMwB,QAAO,SAAA4B,GAAE,OAAIA,EAAG1J,IAAM+F,EAAO/F,MAC9C,IAAK,eACD,MAAM,CAAN,2BAAa+F,EAAO5F,UAApB,IAA8B2H,OAAQ,MAAOE,aAAc,UAA3D,mBAAwE1B,IAE5E,IAAK,wBACD,OAAOA,EAAM2B,KAAI,SAAAyB,GAAE,OAAIA,EAAG1J,KAAO+F,EAAO/F,GAAjB,2BAA2B0J,GAA3B,IAA+B5I,MAAOiF,EAAOjF,QAAU4I,KAClF,IAAK,yBACD,OAAOpD,EAAM2B,KAAI,SAAAyB,GAAE,OAAIA,EAAG1J,KAAO+F,EAAO/F,GAAjB,2BAA2B0J,GAA3B,IAA+B5B,OAAQ/B,EAAO+B,SAAW4B,KACpF,IAAK,gCACD,OAAOpD,EAAM2B,KAAI,SAAAyB,GAAE,OAAIA,EAAG1J,KAAO+F,EAAO/F,GAAjB,2BAA2B0J,GAA3B,IAA+B1B,aAAcjC,EAAOnB,SAAW8E,KAC1F,IAAK,gBACD,OAAO3D,EAAO1F,UAAU4H,KAAI,SAAAyB,GAAE,kCAAUA,GAAV,IAAc5B,OAAQ,MAAOE,aAAc,YAC7E,QACI,OAAO1B,IiBJf2D,IbZsB,WAAoF,IAAnF3D,EAAkF,uDAAxDxG,EAAciG,EAA0C,uCACzG,OAAQA,EAAO9F,MACX,IAAK,iBACD,OAAO,2BAAKqG,GAAZ,IAAmB1B,OAAQmB,EAAOnB,SACtC,IAAK,gBACD,OAAO,2BAAK0B,GAAZ,IAAmBtF,MAAO+E,EAAO/E,QACrC,IAAK,wBACD,OAAO,2BAAKsF,GAAZ,IAAmBvB,cAAegB,EAAOzE,QAC7C,QACI,OAAOgF,IaIfuC,KLfuB,WAAoF,IAAnFvC,EAAkF,uDAAxDxG,GAAciG,EAA0C,uCAC1G,OAAQA,EAAO9F,MACX,IAAK,yBACD,OAAO,2BAAKqG,GAAZ,IAAmBsC,WAAY7C,EAAOzE,QAC1C,QACI,OAAOgF,MKaN4H,GAAiBC,eAGjBC,GAAQC,aAAYR,GAAaS,aAAgBC,KAAiBL,KAM/E,SAAUN,KAAV,iEACI,OADJ,SACUY,YAAI,CACNjC,KACAzB,KACAhF,KACA2C,OALR,wCADAyF,GAAeO,IAAIb,IAYnBpO,OAAO4O,MAAQA,GClCfM,IAASnB,OACL,kBAAC,IAAD,CAAUa,MAAOA,IACb,kBAAC,GAAD,OACSO,SAASC,eAAe,SpBgInC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1L,MAAK,SAAA2L,GACJA,EAAaC,gBAEdC,OAAM,SAAAlO,GACLL,QAAQK,MAAMA,EAAMsE,c","file":"static/js/main.99cc8aaf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, { AxiosResponse } from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9aa516cb-8f4b-45f8-be8d-59445844c51c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists(): Promise<AxiosResponse<TodolistType[]>> {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title });\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, { title: title });\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string): Promise<GetTasksResponse> {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n            .then(res => res.data);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string): Promise<AxiosResponse<ResponseType>> {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n        const promise = instance.get<MeResponseType>('auth/me');\r\n        return promise.then(res => res.data)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type MeResponseType = ResponseType<{ id: number; email: string; login: string }>\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.status } : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({ addItem, disabled = false }: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n            disabled={disabled}\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case 'APP/SET-IS-INITIALIED':\r\n            return { ...state, isInitialized: action.value }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({ type: 'APP/SET-IS-INITIALIED', value } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","import { put } from 'redux-saga/effects'\r\nimport { setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { ResponseType } from '../api/todolists-api'\r\n\r\nexport function* handleServerAppErrorSaga<D>(data: ResponseType<D>) {\r\n    if (data.messages.length) {\r\n        yield put(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        yield put(setAppErrorAC('Some error occurred'))\r\n    }\r\n    yield put(setAppStatusAC('failed'))\r\n}\r\n\r\nexport function* handleServerNetworkErrorSaga(error: { message: string }) {\r\n    yield put(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    yield put(setAppStatusAC('failed'))\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType } from '../../api/todolists-api'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? { ...t, ...action.model } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = { ...state }\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return { ...state, [action.todolistId]: action.tasks }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({ type: 'UPDATE-TASK', model, todolistId, taskId } as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({ type: 'SET-TASKS', tasks, todolistId } as const)\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n","import { AxiosResponse } from \"axios\"\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\"\r\nimport { GetTasksResponse, ResponseType, TaskType, todolistsAPI, UpdateTaskModelType } from \"../../api/todolists-api\"\r\nimport { setAppStatusAC } from \"../../app/app-reducer\"\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { handleServerAppErrorSaga, handleServerNetworkErrorSaga } from \"../../utils/error-utils-sagas\";\r\nimport { addTaskAC, removeTaskAC, setTasksAC, UpdateDomainTaskModelType, updateTaskAC } from \"./tasks-reducer\"\r\n\r\nexport function* fetchTasksWorkerSaga(action: ReturnType<typeof fetchTasksAA>) {\r\n    yield put(setAppStatusAC('loading'))\r\n    const data: GetTasksResponse = yield call(todolistsAPI.getTasks, action.todolistId)\r\n    const tasks = data.items\r\n    yield put(setTasksAC(tasks, action.todolistId))\r\n    yield put(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const fetchTasksAA = (todolistId: string) => ({\r\n    type: \"TASKS/FETCH-TASKS\",\r\n    todolistId\r\n} as const)\r\n\r\nexport function* removeTaskWorkerSaga(action: ReturnType<typeof removeTaskAA>) {\r\n    const response: AxiosResponse<ResponseType> = yield call(todolistsAPI.deleteTask, action.todolistId, action.taskId)\r\n    yield put(removeTaskAC(action.taskId, action.todolistId))\r\n}\r\n\r\nexport const removeTaskAA = (taskId: string, todolistId: string) => ({\r\n    type: \"TASKS/REMOVE-TASK\",\r\n    taskId,\r\n    todolistId\r\n})\r\n\r\nexport function* addTaskWorkerSaga(action: ReturnType<typeof addTaskAA>) {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<ResponseType<{ item: TaskType }>> = yield call(todolistsAPI.createTask, action.todolistId, action.title)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            const task = response.data.data.item\r\n            yield put(addTaskAC(task))\r\n            yield put(setAppStatusAC('succeeded'))\r\n        } else {\r\n            yield* handleServerAppErrorSaga(response.data)\r\n        }\r\n    } catch (error) {\r\n        yield* handleServerNetworkErrorSaga(error);\r\n    }\r\n}\r\n\r\n\r\nexport const addTaskAA = (title: string, todolistId: string) => ({\r\n    type: \"TASKS/ADD-TASK\",\r\n    title,\r\n    todolistId,\r\n} as const)\r\n\r\nexport function* updateTaskWorkerSaga(action: ReturnType<typeof updateTaskAA>) {\r\n    const state: AppRootStateType = yield select()\r\n    const task = state.tasks[action.todolistId].find(t => t.id === action.taskId)\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        console.warn('task not found in the state')\r\n        return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...action.domainModel\r\n    }\r\n\r\n    const response: AxiosResponse<ResponseType<TaskType>> = yield call(todolistsAPI.updateTask, action.todolistId, action.taskId, apiModel)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            yield put(updateTaskAC(action.taskId, action.domainModel, action.todolistId))\r\n        }\r\n        else {\r\n            yield* handleServerAppErrorSaga(response.data)\r\n        }\r\n    } catch (error) {\r\n        yield* handleServerNetworkErrorSaga(error);\r\n    }\r\n}\r\n\r\nexport const updateTaskAA = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: \"TASKS/UPDATE-TASK\",\r\n    taskId,\r\n    domainModel,\r\n    todolistId\r\n})\r\n\r\nexport function* tasksWatcherSaga() {\r\n    yield takeEvery(\"TASKS/FETCH-TASKS\", fetchTasksWorkerSaga)\r\n    yield takeEvery(\"TASKS/REMOVE-TASK\", removeTaskWorkerSaga)\r\n    yield takeEvery(\"TASKS/ADD-TASK\", addTaskWorkerSaga)\r\n    yield takeEvery(\"TASKS/UPDATE-TASK\", updateTaskWorkerSaga)\r\n}\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksAA } from '../tasks-sagas'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ demo = false, ...props }: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const action = fetchTasksAA(props.todolist.id)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { AxiosResponse } from \"axios\";\r\nimport { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { ResponseType } from './../../api/todolists-api';\r\nimport { todolistsAPI, TodolistType } from \"../../api/todolists-api\";\r\nimport { setAppStatusAC } from \"../../app/app-reducer\";\r\nimport { addTodolistAC, changeTodolistEntityStatusAC, changeTodolistTitleAC, removeTodolistAC, setTodolistsAC } from \"./todolists-reducer\";\r\nimport { handleServerNetworkErrorSaga } from \"../../utils/error-utils-sagas\";\r\n\r\nexport function* fetchTodolistsWorkerSaga() {\r\n    yield put(setAppStatusAC('loading'))\r\n    try {\r\n        const response: AxiosResponse<TodolistType[]> = yield call(todolistsAPI.getTodolists)\r\n        const todolists = response.data\r\n        yield put(setTodolistsAC(todolists))\r\n        yield put(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        yield* handleServerNetworkErrorSaga(error);\r\n    }\r\n}\r\n\r\nexport const fetchTodolistsAA = () => ({\r\n    type: \"TODOLISTS/FETCH-TODOLISTS\",\r\n})\r\n\r\nexport function* removeTodolistWorkerSaga(action: ReturnType<typeof removeTodolistAA>) {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    yield put(setAppStatusAC('loading'))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    yield put(changeTodolistEntityStatusAC(action.todolistId, 'loading'))\r\n    const response: AxiosResponse<ResponseType> = yield call(todolistsAPI.deleteTodolist, action.todolistId)\r\n    yield put(removeTodolistAC(action.todolistId))\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    yield put(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const removeTodolistAA = (todolistId: string) => ({\r\n    type: \"TODOLISTS/REMOVE-TODOLIST\",\r\n    todolistId\r\n})\r\n\r\nexport function* addTodolistWorkerSaga(action: ReturnType<typeof addTodolistAA>) {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<ResponseType<{ item: TodolistType }>> = yield call(todolistsAPI.createTodolist, action.title)\r\n    const todolist = response.data.data.item\r\n    yield put(addTodolistAC(todolist))\r\n    yield put(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport const addTodolistAA = (title: string) => ({\r\n    type: \"TODOLISTS/ADD-TODOLIST\",\r\n    title\r\n})\r\n\r\nexport function* changeTodolistTitleWorkerSaga(action: ReturnType<typeof changeTodolistAA>) {\r\n    const response: AxiosResponse<ResponseType> = yield call(todolistsAPI.updateTodolist, action.todolistId, action.title)\r\n    yield put(changeTodolistTitleAC(action.todolistId, action.title))\r\n}\r\n\r\nexport const changeTodolistAA = (todolistId: string, title: string) => ({\r\n    type: \"TODOLISTS/CHANGE-TODOLIST\",\r\n    todolistId,\r\n    title\r\n})\r\n\r\nexport function* todolistsWatcherSaga() {\r\n    yield takeEvery(\"TODOLISTS/FETCH-TODOLISTS\", fetchTodolistsWorkerSaga)\r\n    yield takeEvery(\"TODOLISTS/REMOVE-TODOLIST\", removeTodolistWorkerSaga)\r\n    yield takeEvery(\"TODOLISTS/ADD-TODOLIST\", addTodolistWorkerSaga)\r\n    yield takeEvery(\"TODOLISTS/CHANGE-TODOLIST\", changeTodolistTitleWorkerSaga)\r\n}","import React, { useCallback, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    changeTodolistFilterAC,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { TasksStateType } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { addTaskAA, removeTaskAA, updateTaskAA } from './tasks-sagas'\r\nimport { addTodolistAA, changeTodolistAA, fetchTodolistsAA, removeTodolistAA } from './todolists-sagas'\r\n\r\nimport { Grid, Paper } from '@material-ui/core'\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsAA())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAA(id, todolistId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAA(title, todolistId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = updateTaskAA(id, { status }, todolistId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskAA(id, { title: newTitle }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistAA(id))\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistAA(id, title))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAA(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{ padding: '20px' }}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: '10px' }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setAppErrorAC } from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","const initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return { ...state, isLoggedIn: action.value }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n","import { AxiosResponse } from 'axios';\r\nimport { call, put, takeEvery } from \"redux-saga/effects\"\r\nimport { authAPI, LoginParamsType, ResponseType } from \"../../api/todolists-api\"\r\nimport { setAppStatusAC } from \"../../app/app-reducer\"\r\nimport { handleServerAppErrorSaga, handleServerNetworkErrorSaga } from '../../utils/error-utils-sagas';\r\nimport { setIsLoggedInAC } from \"./auth-reducer\"\r\n\r\nexport function* loginWorkerSaga(action: ReturnType<typeof authLoginAA>) {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<ResponseType<{ userId?: number }>> = yield call(authAPI.login, action.data)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            yield put(setIsLoggedInAC(true))\r\n            yield put(setAppStatusAC('succeeded'))\r\n        } else {\r\n            yield* handleServerAppErrorSaga(response.data)\r\n        }\r\n    } catch (error) {\r\n        yield* handleServerNetworkErrorSaga(error);\r\n    }\r\n}\r\n\r\nexport const authLoginAA = (data: LoginParamsType) => ({\r\n    type: \"AUTH/LOGIN\",\r\n    data,\r\n})\r\n\r\nexport function* logoutWorkerSaga() {\r\n    yield put(setAppStatusAC('loading'))\r\n    const response: AxiosResponse<ResponseType<{ userId?: number }>> = yield call(authAPI.logout)\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            yield put(setIsLoggedInAC(false))\r\n            yield put(setAppStatusAC('succeeded'))\r\n        } else {\r\n            yield* handleServerAppErrorSaga(response.data)\r\n        }\r\n    } catch (error) {\r\n        yield* handleServerNetworkErrorSaga(error);\r\n    }\r\n}\r\n\r\nexport const authLogoutAA = () => ({\r\n    type: \"AUTH/LOGOUT\",\r\n})\r\n\r\nexport function* authWatcherSaga() {\r\n    yield takeEvery(\"AUTH/LOGIN\", loginWorkerSaga)\r\n    yield takeEvery(\"AUTH/LOGOUT\", logoutWorkerSaga)\r\n}","import React from 'react'\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { authLoginAA } from './auth-sagas'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(authLoginAA(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import { MeResponseType } from './../api/todolists-api';\r\nimport { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { authAPI } from \"../api/todolists-api\";\r\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\";\r\nimport { setAppInitializedAC } from \"./app-reducer\";\r\n\r\n\r\nexport function* initializeAppWorkerSaga() {\r\n    try {\r\n        const data: MeResponseType = yield call(authAPI.me)\r\n        if (data.resultCode === 0) {\r\n            yield put(setIsLoggedInAC(true));\r\n        } else {\r\n        }\r\n    }\r\n    finally {\r\n        yield put(setAppInitializedAC(true));\r\n    }\r\n}\r\n\r\nexport const initializeAppAA = () => ({\r\n    type: \"APP/INITIALIZE-APP\"\r\n})\r\n\r\nexport function* appWatcherSaga() {\r\n    yield takeEvery(\"APP/INITIALIZE-APP\", initializeAppWorkerSaga)\r\n}","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { RequestStatusType } from './app-reducer'\r\nimport { BrowserRouter, Route } from 'react-router-dom'\r\nimport { Login } from '../features/Login/Login'\r\nimport { initializeAppAA } from './app-sagas'\r\nimport { authLogoutAA } from '../features/Login/auth-sagas'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(authLogoutAA())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppAA())\r\n    }, [])\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter basename={\"project-todolist-ts-sagas\"}>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar />\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress />}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route path={'/login'} render={() => <Login />} />\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { all } from 'redux-saga/effects'\r\nimport { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { appReducer } from './app-reducer'\r\nimport { authReducer } from '../features/Login/auth-reducer'\r\nimport { tasksWatcherSaga } from '../features/TodolistsList/tasks-sagas';\r\nimport { appWatcherSaga } from './app-sagas';\r\nimport { authWatcherSaga } from '../features/Login/auth-sagas';\r\nimport { todolistsWatcherSaga } from '../features/TodolistsList/todolists-sagas';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const sagaMiddleware = createSagaMiddleware()\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, sagaMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// создаем root saga-watcher\r\nsagaMiddleware.run(rootWatcher)\r\nfunction* rootWatcher() {\r\n    yield all([\r\n        appWatcherSaga(),\r\n        authWatcherSaga(),\r\n        tasksWatcherSaga(),\r\n        todolistsWatcherSaga()\r\n    ])\r\n}\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}